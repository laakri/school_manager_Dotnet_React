import { useState, useEffect } from "react";
import Layout from "../components/layout/Layout";
import api from "../services/api";
import { FileIcon, EyeIcon } from "lucide-react";

interface Stats {
  totalStudents: number;
  totalTeachers: number;
}

interface PDFRecord {
  teacherId: number;
  teacherName: string;
  session: string;
  date: string;
  fileName: string;
  studentCount: number;
  pdfContent: string;
}

const Dashboard = () => {
  const [stats, setStats] = useState<Stats>({
    totalStudents: 0,
    totalTeachers: 0,
  });
  const [pdfHistory, setPdfHistory] = useState<PDFRecord[]>([]);

  useEffect(() => {
    // Fetch stats from API
    api.getStatsStudent().then((response) => {
      if (response.data) {
        setStats(response.data as Stats);
      }
    }).catch(error => {
      console.error("Error fetching stats:", error);
    });

    // Charger l'historique des PDF
    const history = JSON.parse(localStorage.getItem('pdfHistory') || '[]');
    setPdfHistory(history);
  }, []);

  const viewPDF = (pdfContent: string) => {
    // Créer un blob à partir du contenu PDF
    const byteCharacters = atob(pdfContent.split(',')[1]);
    const byteNumbers = new Array(byteCharacters.length);
    
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    
    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([byteArray], { type: 'application/pdf' });
    
    // Créer une URL pour le blob
    const fileURL = URL.createObjectURL(blob);
    
    // Ouvrir dans un nouvel onglet
    window.open(fileURL, '_blank');
    
    // Nettoyer l'URL après ouverture
    setTimeout(() => {
      URL.revokeObjectURL(fileURL);
    }, 100);
  };

  return (
    <Layout>
      <div className="space-y-6">
        <h2 className="text-2xl font-bold text-gray-900">Dashboard</h2>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 gap-5 sm:grid-cols-2">
          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">
                      Total Students
                    </dt>
                    <dd className="text-lg font-medium text-gray-900">
                      {stats.totalStudents}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">
                      Total Teachers
                    </dt>
                    <dd className="text-lg font-medium text-gray-900">
                      {stats.totalTeachers}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Nouvelle section pour l'historique des PDF */}
        <div className="mt-8">
          <h3 className="text-lg font-semibold mb-4">Recent Absence Reports</h3>
          <div className="bg-white shadow rounded-lg overflow-hidden">
            <div className="divide-y divide-gray-200">
              {pdfHistory.length > 0 ? (
                pdfHistory.map((record, index) => (
                  <div key={index} className="p-4 hover:bg-gray-50">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <FileIcon className="h-5 w-5 text-gray-400 mr-3" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">
                            {record.fileName}
                          </p>
                          <p className="text-sm text-gray-500">
                            Generated by {record.teacherName} - {record.session} Session
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <button
                          onClick={() => viewPDF(record.pdfContent)}
                          className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                          title="View PDF"
                        >
                          <EyeIcon className="h-5 w-5 text-gray-500 hover:text-gray-700" />
                        </button>
                        <div className="text-right">
                          <p className="text-sm text-gray-500">
                            {new Date(record.date).toLocaleDateString()}
                          </p>
                          <p className="text-sm text-gray-500">
                            {record.studentCount} students
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="p-4 text-center text-gray-500">
                  No absence reports generated yet
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default Dashboard;
